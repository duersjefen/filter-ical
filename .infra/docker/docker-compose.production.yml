version: '3.8'

services:
  # Nginx Reverse Proxy - Single entry point for all domains
  nginx:
    image: nginx:alpine
    container_name: websites-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx-logs:/var/log/nginx
      - letsencrypt-certs:/etc/letsencrypt:ro
      - certbot-webroot:/var/www/certbot:ro
    depends_on:
      - filter-ical
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - websites-network

  # Filter iCal Frontend - filter-ical.de (PRODUCTION)
  filter-ical-frontend:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/filter-ical-frontend:latest
    container_name: filter-ical-frontend
    expose:
      - "80"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - websites-network
    labels:
      - "website.domain=filter-ical.de"
      - "website.service=filter-ical-frontend"

  # Filter iCal Frontend - STAGING Environment
  filter-ical-frontend-staging:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/filter-ical-frontend:staging-latest
    container_name: filter-ical-frontend-staging
    expose:
      - "80"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - websites-network
    labels:
      - "website.domain=staging.filter-ical.de"
      - "website.service=filter-ical-frontend-staging"

  # Filter iCal Frontend - DEVELOPMENT Environment
  filter-ical-frontend-dev:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/filter-ical-frontend:dev-latest
    container_name: filter-ical-frontend-dev
    expose:
      - "80"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - websites-network
    labels:
      - "website.domain=dev.filter-ical.de"
      - "website.service=filter-ical-frontend-dev"

  # Filter iCal Backend - filter-ical.de (PRODUCTION)
  filter-ical:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/filter-ical-backend:latest
    container_name: filter-ical
    expose:
      - "3000"
    environment:
      - ENV=production
      - PORT=3000
      - DOMAIN=filter-ical.de
    volumes:
      - filter-ical-data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - websites-network
    labels:
      - "website.domain=filter-ical.de"
      - "website.service=filter-ical"

  # Filter iCal Backend - STAGING Environment
  filter-ical-backend-staging:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/filter-ical-backend:staging-latest
    container_name: filter-ical-backend-staging
    expose:
      - "3000"
    environment:
      - ENV=staging
      - PORT=3000
      - DOMAIN=staging.filter-ical.de
    volumes:
      - filter-ical-staging-data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - websites-network
    labels:
      - "website.domain=staging.filter-ical.de"
      - "website.service=filter-ical-backend-staging"

  # Filter iCal Backend - DEVELOPMENT Environment
  filter-ical-backend-dev:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/filter-ical-backend:dev-latest
    container_name: filter-ical-backend-dev
    expose:
      - "3000"
    environment:
      - ENV=development
      - PORT=3000
      - DOMAIN=dev.filter-ical.de
    volumes:
      - filter-ical-dev-data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - websites-network
    labels:
      - "website.domain=dev.filter-ical.de"
      - "website.service=filter-ical-backend-dev"

  # Future: Gabs Massage - gabs-massage.de
  # gabs-massage:
  #   image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/gabs-massage:latest
  #   container_name: gabs-massage
  #   expose:
  #     - "4000"
  #   environment:
  #     - ENV=production
  #     - PORT=4000
  #     - DOMAIN=gabs-massage.de
  #   volumes:
  #     - gabs-massage-data:/app/data
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   networks:
  #     - websites-network
  #   labels:
  #     - "website.domain=gabs-massage.de"
  #     - "website.service=gabs-massage"

  # SSL Certificate Manager
  certbot:
    image: certbot/certbot
    container_name: websites-certbot
    volumes:
      - letsencrypt-certs:/etc/letsencrypt
      - certbot-webroot:/var/www/certbot
    command: >
      sh -c "
      while :; do 
        sleep 6h & wait $$!; 
        certbot renew --quiet --webroot --webroot-path=/var/www/certbot;
      done
      "
    restart: unless-stopped
    networks:
      - websites-network

networks:
  websites-network:
    driver: bridge
    name: websites-network

volumes:
  # Application data - Production
  filter-ical-data:
    name: websites-filter-ical-data
    driver: local
  
  # Application data - Staging
  filter-ical-staging-data:
    name: websites-filter-ical-staging-data
    driver: local
    
  # Application data - Development
  filter-ical-dev-data:
    name: websites-filter-ical-dev-data
    driver: local
  
  # gabs-massage-data:
  #   name: websites-gabs-massage-data
  #   driver: local
  
  # Infrastructure
  nginx-logs:
    name: websites-nginx-logs
    driver: local
  letsencrypt-certs:
    name: websites-letsencrypt-certs
    driver: local
  certbot-webroot:
    name: websites-certbot-webroot
    driver: local