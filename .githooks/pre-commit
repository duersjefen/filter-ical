#!/bin/bash
# =============================================================================  
# Git Pre-commit Hook - Universal Quality Gate (Language Independent)
# =============================================================================
# This runs automatically before every git commit to ensure code quality.
# Works with any language through standardized Docker containers and Make targets.
# Install: git config core.hooksPath .githooks

set -e

echo "🔍 Running universal pre-commit quality checks..."

# Check if there are any changes staged for commit
if ! git diff --cached --quiet; then
    echo "📋 Changes detected, running validation..."
    
    # =========================================================================
    # DEPENDENCY SYNCHRONIZATION VALIDATION
    # =========================================================================
    # Prevent package-lock.json sync issues that can break CI/CD
    echo "🔧 Validating dependency synchronization..."
    
    # Check frontend package-lock.json sync
    if [ -f "frontend/package.json" ] && [ -f "frontend/package-lock.json" ]; then
        if git diff --cached --name-only | grep -q "frontend/package.json"; then
            echo "⚠️  Frontend package.json modified - checking package-lock.json sync"
            cd frontend
            if ! npm ci --dry-run >/dev/null 2>&1; then
                echo "❌ Frontend package.json and package-lock.json are out of sync!"
                echo "🔧 Fix this by running: cd frontend && rm package-lock.json && npm install"
                echo "   Then add the updated package-lock.json to your commit"
                exit 1
            fi
            cd ..
            echo "✅ Frontend dependencies are synchronized"
        fi
    fi
    
    # Check backend requirements.txt for malformed lines
    if [ -f "backend/requirements.txt" ]; then
        if git diff --cached --name-only | grep -q "backend/requirements.txt"; then
            echo "🔍 Validating backend requirements.txt format..."
            if grep -E '.*#.*[^[:space:]]' backend/requirements.txt >/dev/null 2>&1; then
                echo "❌ Malformed requirements.txt detected - comments must have space after #"
                echo "🔧 Fix by ensuring all comments have proper spacing: # comment"
                exit 1
            fi
            echo "✅ Backend requirements.txt format is valid"
        fi
    fi
    
    # Use the clean Makefile interface for testing  
    echo "🧪 Running unit tests (required for commits)..."
    
    if make test >/dev/null 2>&1; then
        echo "✅ All tests passed"
    else
        echo "❌ Tests failed! Commit aborted."
        echo "💡 Run 'make test' locally to see detailed error output"
        exit 1
    fi
else
    echo "📋 No changes staged for commit"
fi

echo "✅ All quality checks passed - commit proceeding"