#!/bin/bash
# =============================================================================  
# Git Pre-commit Hook - Universal Quality Gate (Language Independent)
# =============================================================================
# This runs automatically before every git commit to ensure code quality.
# Works with any language through standardized Docker containers and Make targets.
# Install: git config core.hooksPath .githooks

set -e

echo "🔍 Running universal pre-commit quality checks..."

# Check if there are any changes staged for commit
if ! git diff --cached --quiet; then
    echo "📋 Changes detected, running validation..."
    
    # =========================================================================
    # DEPENDENCY SYNCHRONIZATION VALIDATION
    # =========================================================================
    # Prevent package-lock.json sync issues that can break CI/CD
    echo "🔧 Validating dependency synchronization..."
    
    # Check frontend package-lock.json sync
    if [ -f "frontend/package.json" ] && [ -f "frontend/package-lock.json" ]; then
        if git diff --cached --name-only | grep -q "frontend/package.json"; then
            echo "⚠️  Frontend package.json modified - checking package-lock.json sync"
            cd frontend
            if ! npm ci --dry-run >/dev/null 2>&1; then
                echo "❌ Frontend package.json and package-lock.json are out of sync!"
                echo "🔧 Fix this by running: cd frontend && rm package-lock.json && npm install"
                echo "   Then add the updated package-lock.json to your commit"
                exit 1
            fi
            cd ..
            echo "✅ Frontend dependencies are synchronized"
        fi
    fi
    
    # Check backend requirements.txt for malformed lines
    if [ -f "backend/requirements.txt" ]; then
        if git diff --cached --name-only | grep -q "backend/requirements.txt"; then
            echo "🔍 Validating backend requirements.txt format..."
            # Check for comments without space after # (e.g., #comment instead of # comment)
            if grep -E '#[^[:space:]]' backend/requirements.txt >/dev/null 2>&1; then
                echo "❌ Malformed requirements.txt detected - comments must have space after #"
                echo "🔧 Fix by ensuring all comments have proper spacing: # comment"
                echo "🔍 Found:"
                grep -E '#[^[:space:]]' backend/requirements.txt
                exit 1
            fi
            echo "✅ Backend requirements.txt format is valid"
        fi
    fi
    
    # =========================================================================
    # SMART TEST EXECUTION
    # =========================================================================
    # Skip tests for infrastructure-only changes (no code modified)
    CHANGED_FILES=$(git diff --cached --name-only)
    CODE_CHANGED=false

    # Check if any Python/JavaScript code was modified
    if echo "$CHANGED_FILES" | grep -qE '\.(py|js|vue|ts)$'; then
        CODE_CHANGED=true
    fi

    # Infrastructure-only changes that don't require tests
    if ! $CODE_CHANGED && echo "$CHANGED_FILES" | grep -qE '^(Dockerfile|.*\.yml|.*\.yaml|.*nginx\.conf|Makefile|\.github/)'; then
        echo "📦 Infrastructure-only changes detected - skipping tests"
    else
        echo "🧪 Running unit tests (required for commits)..."

        # Ensure backend dependencies are installed
        if [ ! -d "backend/venv" ] || [ ! -f "backend/venv/bin/pytest" ]; then
            echo "🔧 Installing backend dependencies (first time setup)..."
            cd backend
            python3 -m venv venv 2>/dev/null || true
            . venv/bin/activate
            pip install -q -r requirements.txt
            deactivate
            cd ..
        fi

        if make test >/dev/null 2>&1; then
            echo "✅ All tests passed"
        else
            echo "❌ Tests failed! Commit aborted."
            echo "💡 Run 'make test' locally to see detailed error output"
            echo "💡 Or use 'git commit --no-verify' to bypass (use with caution)"
            exit 1
        fi
    fi
else
    echo "📋 No changes staged for commit"
fi

echo "✅ All quality checks passed - commit proceeding"