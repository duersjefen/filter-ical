/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/calendars": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get calendars
         * @description Fetch all imported calendar sources
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved calendars */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "calendars": [
                         *         {
                         *           "id": "cal_001",
                         *           "name": "Work Calendar",
                         *           "url": "https://example.com/work.ics",
                         *           "user_id": "public",
                         *           "created_at": "2024-01-15T10:30:00Z"
                         *         }
                         *       ]
                         *     } */
                        "application/json": {
                            calendars: components["schemas"]["Calendar"][];
                        };
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        /**
         * Create new calendar
         * @description Import a new calendar from an iCal URL
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "name": "Team Events",
                     *       "url": "https://example.com/team.ics"
                     *     } */
                    "application/json": {
                        /**
                         * @description Calendar display name
                         * @example Team Events
                         */
                        name: string;
                        /**
                         * Format: uri
                         * @description iCal URL to import from
                         * @example https://example.com/team.ics
                         */
                        url: string;
                    };
                };
            };
            responses: {
                /** @description Calendar created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "id": "cal_003",
                         *       "name": "Team Events",
                         *       "url": "https://example.com/team.ics",
                         *       "user_id": "public",
                         *       "created_at": "2024-01-17T09:15:00Z"
                         *     } */
                        "application/json": components["schemas"]["Calendar"];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/calendars/{calendar_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete calendar
         * @description Remove a calendar and all associated data
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Unique calendar identifier
                     * @example cal_001
                     */
                    calendar_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Calendar deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/calendar/{calendar_id}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get calendar event types
         * @description Retrieve event types grouped by identical titles, showing only future events
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Unique calendar identifier
                     * @example cal_001
                     */
                    calendar_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved event types */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "events": {
                         *         "Weekly Team Meeting": {
                         *           "count": 3,
                         *           "events": [
                         *             {
                         *               "id": "evt_001",
                         *               "title": "Weekly Team Meeting",
                         *               "start": "2025-09-20T10:00:00Z",
                         *               "end": "2025-09-20T11:00:00Z",
                         *               "event_type": "Work",
                         *               "description": "Weekly team sync meeting",
                         *               "location": "Conference Room A"
                         *             },
                         *             {
                         *               "id": "evt_008",
                         *               "title": "Weekly Team Meeting",
                         *               "start": "2025-09-27T10:00:00Z",
                         *               "end": "2025-09-27T11:00:00Z",
                         *               "event_type": "Work",
                         *               "description": "Weekly team sync meeting",
                         *               "location": "Conference Room A"
                         *             }
                         *           ]
                         *         },
                         *         "Daily Standup": {
                         *           "count": 2,
                         *           "events": [
                         *             {
                         *               "id": "evt_002",
                         *               "title": "Daily Standup",
                         *               "start": "2025-09-17T09:00:00Z",
                         *               "end": "2025-09-17T09:15:00Z",
                         *               "event_type": "Work",
                         *               "description": "Daily team standup",
                         *               "location": null
                         *             }
                         *           ]
                         *         }
                         *       }
                         *     } */
                        "application/json": {
                            events: {
                                [key: string]: {
                                    /** @description Number of future event instances in this event type */
                                    count: number;
                                    /** @description Array of full event objects in this event type */
                                    events: components["schemas"]["Event"][];
                                };
                            };
                        };
                    };
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/calendar/{calendar_id}/raw-events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get individual calendar events
         * @description Retrieve all events as a flat array for detailed processing
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Unique calendar identifier
                     * @example cal_001
                     */
                    calendar_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved individual events */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "events": [
                         *         {
                         *           "id": "evt_001",
                         *           "title": "Team Meeting",
                         *           "start": "2025-09-20T10:00:00Z",
                         *           "end": "2025-09-20T11:00:00Z",
                         *           "event_type": "Work",
                         *           "description": "Weekly sync",
                         *           "location": "Room A"
                         *         },
                         *         {
                         *           "id": "evt_002",
                         *           "title": "Project Review",
                         *           "start": "2025-09-21T14:00:00Z",
                         *           "end": "2025-09-21T15:00:00Z",
                         *           "event_type": "Meeting",
                         *           "description": "Quarterly review",
                         *           "location": "Room B"
                         *         }
                         *       ]
                         *     } */
                        "application/json": {
                            events: components["schemas"]["Event"][];
                        };
                    };
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/filtered-calendars": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get filtered calendars
         * @description Retrieve all created filtered calendar links
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved filtered calendars */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "filtered_calendars": [
                         *         {
                         *           "id": "fc_001",
                         *           "name": "Work Events Only",
                         *           "public_token": "abc123def456",
                         *           "calendar_url": "https://filter-ical.de/cal/abc123def456",
                         *           "preview_url": "https://filter-ical.de/preview/abc123def456",
                         *           "source_calendar_id": "cal_001",
                         *           "filter_config": {
                         *             "include_event_types": [
                         *               "Work",
                         *               "Meeting"
                         *             ],
                         *             "exclude_event_types": [],
                         *             "filter_mode": "include"
                         *           },
                         *           "created_at": "2024-01-18T09:00:00Z",
                         *           "updated_at": "2024-01-18T09:00:00Z"
                         *         }
                         *       ]
                         *     } */
                        "application/json": {
                            filtered_calendars: components["schemas"]["FilteredCalendar"][];
                        };
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        /**
         * Create filtered calendar
         * @description Create a new filtered calendar with shareable link
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "source_calendar_id": "cal_001",
                     *       "name": "Work Events Only",
                     *       "filter_config": {
                     *         "include_event_types": [
                     *           "Work",
                     *           "Meeting"
                     *         ],
                     *         "exclude_event_types": [],
                     *         "filter_mode": "include"
                     *       }
                     *     } */
                    "application/json": {
                        /**
                         * @description ID of the source calendar to filter
                         * @example cal_001
                         */
                        source_calendar_id: string;
                        /**
                         * @description Name for the filtered calendar
                         * @example Work Events Only
                         */
                        name: string;
                        filter_config: components["schemas"]["FilterConfig"];
                    };
                };
            };
            responses: {
                /** @description Filtered calendar created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FilteredCalendar"];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/filtered-calendars/{filtered_calendar_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update filtered calendar
         * @description Update an existing filtered calendar's name or filter configuration
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Unique filtered calendar identifier
                     * @example fc_001
                     */
                    filtered_calendar_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "name": "Updated Work Events",
                     *       "filter_config": {
                     *         "include_event_types": [
                     *           "Work",
                     *           "Meeting",
                     *           "Training"
                     *         ],
                     *         "exclude_event_types": [],
                     *         "filter_mode": "include"
                     *       }
                     *     } */
                    "application/json": {
                        /**
                         * @description Updated name for the filtered calendar
                         * @example Updated Work Events
                         */
                        name?: string;
                        filter_config?: components["schemas"]["FilterConfig"];
                    };
                };
            };
            responses: {
                /** @description Filtered calendar updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FilteredCalendar"];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        post?: never;
        /**
         * Delete filtered calendar
         * @description Remove a filtered calendar and its public access link
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Unique filtered calendar identifier
                     * @example fc_001
                     */
                    filtered_calendar_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Filtered calendar deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cal/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get public filtered calendar
         * @description Access a filtered calendar using its public token (no authentication required)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Public access token for the filtered calendar
                     * @example abc123def456
                     */
                    token: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved public calendar data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/calendar": string;
                    };
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/calendar/{calendar_id}/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate filtered iCal content
         * @description Create filtered iCal content from a calendar based on event type filters
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Unique calendar identifier
                     * @example cal_001
                     */
                    calendar_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description Event types to include or exclude
                         * @example [
                         *       "Work",
                         *       "Meeting"
                         *     ]
                         */
                        selected_event_types: string[];
                        /**
                         * @description Whether to include or exclude the selected event types
                         * @example include
                         * @enum {string}
                         */
                        filter_mode: "include" | "exclude";
                    };
                };
            };
            responses: {
                /** @description Successfully generated filtered iCal content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/calendar": string;
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check
         * @description Check if the API is running
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description API is healthy */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example healthy */
                            status?: string;
                            /** @example iCal Viewer API is running */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Calendar: {
            /**
             * @description Unique calendar identifier
             * @example cal_001
             */
            id: string;
            /**
             * @description Calendar display name
             * @example Work Calendar
             */
            name: string;
            /**
             * Format: uri
             * @description Source iCal URL
             * @example https://example.com/work.ics
             */
            url: string;
            /**
             * @description Always 'public' for public-first access
             * @example public
             */
            user_id: string;
            /**
             * Format: date-time
             * @description Calendar creation timestamp
             * @example 2024-01-15T10:30:00Z
             */
            created_at: string;
        };
        Event: {
            /**
             * @description Unique event identifier
             * @example evt_001
             */
            id: string;
            /**
             * @description Event title/summary
             * @example Team Meeting
             */
            title: string;
            /**
             * Format: date-time
             * @description Event start time (ISO 8601)
             * @example 2024-01-18T10:00:00Z
             */
            start: string;
            /**
             * Format: date-time
             * @description Event end time (ISO 8601)
             * @example 2024-01-18T11:00:00Z
             */
            end: string;
            /**
             * @description Event type/category
             * @example Work
             */
            event_type: string;
            /**
             * @description Event description (optional)
             * @example Weekly team sync meeting
             */
            description?: string;
            /**
             * @description Event location (optional)
             * @example Conference Room A
             */
            location?: string;
        };
        FilterConfig: {
            /**
             * @description Event types to include (when filter_mode is 'include')
             * @example [
             *       "Work",
             *       "Meeting"
             *     ]
             */
            include_event_types?: string[];
            /**
             * @description Event types to exclude (when filter_mode is 'exclude')
             * @example []
             */
            exclude_event_types?: string[];
            /**
             * @description Filter mode - include or exclude selected event types
             * @example include
             * @enum {string}
             */
            filter_mode: "include" | "exclude";
        };
        FilteredCalendar: {
            /**
             * @description Unique filtered calendar identifier
             * @example fc_001
             */
            id: string;
            /**
             * @description Filtered calendar display name
             * @example Work Events Only
             */
            name: string;
            /**
             * @description Public access token for sharing
             * @example abc123def456
             */
            public_token: string;
            /**
             * Format: uri
             * @description Public subscription URL
             * @example https://filter-ical.de/cal/abc123def456
             */
            calendar_url: string;
            /**
             * Format: uri
             * @description Preview URL for filtered calendar
             * @example https://filter-ical.de/preview/abc123def456
             */
            preview_url: string;
            /**
             * @description Source calendar identifier
             * @example cal_001
             */
            source_calendar_id: string;
            filter_config: components["schemas"]["FilterConfig"];
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2024-01-18T09:00:00Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2024-01-18T15:30:00Z
             */
            updated_at: string;
        };
        Error: {
            /**
             * @description Human-readable error message
             * @example Calendar not found
             */
            detail: string;
        };
    };
    responses: {
        /** @description Bad Request - Invalid input data */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Not Found - Resource does not exist */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal Server Error */
        InternalError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "detail": "Internal server error occurred"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
