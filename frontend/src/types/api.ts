/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/calendars": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List user calendars */
        get: {
            parameters: {
                query?: {
                    /** @description Optional username to filter by */
                    username?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of calendars */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Calendar"][];
                    };
                };
            };
        };
        put?: never;
        /** Add a user calendar */
        post: {
            parameters: {
                query?: {
                    /** @description Optional username to associate the calendar with */
                    username?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example My Work Calendar */
                        name: string;
                        /**
                         * Format: uri
                         * @example https://example.com/calendar.ics
                         */
                        source_url: string;
                    };
                };
            };
            responses: {
                /** @description Calendar created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Calendar"];
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendars/{calendarId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a user calendar */
        delete: {
            parameters: {
                query?: {
                    username?: string;
                };
                header?: never;
                path: {
                    calendarId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Calendar deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Calendar not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendars/{calendarId}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get calendar events (flat structure for user calendars) */
        get: {
            parameters: {
                query?: {
                    username?: string;
                };
                header?: never;
                path: {
                    calendarId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Calendar events */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            events?: components["schemas"]["Event"][];
                        };
                    };
                };
                /** @description Calendar not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendars/{calendarId}/filters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List filters for user calendar */
        get: {
            parameters: {
                query?: {
                    username?: string;
                };
                header?: never;
                path: {
                    calendarId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of filters */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Filter"][];
                    };
                };
                /** @description Calendar not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Create filter for user calendar */
        post: {
            parameters: {
                query?: {
                    username?: string;
                };
                header?: never;
                path: {
                    calendarId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example Work meetings only */
                        name: string;
                        /** @example [
                         *       1,
                         *       2,
                         *       5
                         *     ] */
                        subscribed_event_ids?: number[];
                    };
                };
            };
            responses: {
                /** @description Filter created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Filter"];
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Calendar not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/domains/{domain}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get domain calendar events (grouped structure) */
        get: {
            parameters: {
                query?: {
                    username?: string;
                };
                header?: never;
                path: {
                    /** @example exter */
                    domain: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Domain events with groups */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DomainEventsResponse"];
                    };
                };
                /** @description Domain not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/domains/{domain}/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get groups for domain calendar */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    domain: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of groups */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Group"][];
                    };
                };
                /** @description Domain not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Create a new group (admin) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    domain: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example BCC Events */
                        name: string;
                    };
                };
            };
            responses: {
                /** @description Group created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Group"];
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Domain not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/domains/{domain}/groups/{groupId}/assign-recurring-events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Manually assign recurring events to group (admin) */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    domain: string;
                    groupId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example [
                         *       "Weekly Team Meeting",
                         *       "Monthly Review"
                         *     ] */
                        recurring_event_titles?: string[];
                    };
                };
            };
            responses: {
                /** @description Recurring events assigned successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 2 recurring events assigned to group */
                            message?: string;
                        };
                    };
                };
                /** @description Domain or group not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/domains/{domain}/assignment-rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List assignment rules for domain */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    domain: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of assignment rules */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AssignmentRule"][];
                    };
                };
            };
        };
        put?: never;
        /** Create auto-assignment rule (admin) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    domain: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @example title_contains
                         * @enum {string}
                         */
                        rule_type: "title_contains" | "description_contains";
                        /** @example Event */
                        rule_value: string;
                        /** @example 1 */
                        target_group_id: number;
                    };
                };
            };
            responses: {
                /** @description Rule created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AssignmentRule"];
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Domain not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/domains/{domain}/filters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List filters for domain calendar */
        get: {
            parameters: {
                query?: {
                    username?: string;
                };
                header?: never;
                path: {
                    domain: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of filters */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Filter"][];
                    };
                };
                /** @description Domain not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Create filter for domain calendar */
        post: {
            parameters: {
                query?: {
                    username?: string;
                };
                header?: never;
                path: {
                    domain: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example BCC Events + Selected Meetings */
                        name: string;
                        /** @example [
                         *       1,
                         *       2,
                         *       5
                         *     ] */
                        subscribed_event_ids?: number[];
                        /** @example [
                         *       1,
                         *       3
                         *     ] */
                        subscribed_group_ids?: number[];
                    };
                };
            };
            responses: {
                /** @description Filter created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Filter"];
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Domain not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ical/{uuid}.ics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Export filtered calendar as iCal file */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Filtered iCal file */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/calendar": string;
                    };
                };
                /** @description Filter not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Calendar: {
            /** @example 1 */
            id?: number;
            /** @example My Work Calendar */
            name?: string;
            /**
             * Format: uri
             * @example https://example.com/calendar.ics
             */
            source_url?: string;
            /**
             * @example user
             * @enum {string}
             */
            type?: "user" | "domain";
            /**
             * @description Only present for domain calendars
             * @example exter
             */
            domain_key?: string;
            /** @example john_doe */
            username?: string;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            last_fetched?: string;
        };
        DomainEventsResponse: {
            groups?: components["schemas"]["GroupWithEvents"][];
            /** @description Recurring events not assigned to any group */
            ungrouped_events?: components["schemas"]["RecurringEvent"][];
        };
        GroupWithEvents: {
            /** @example 1 */
            id?: number;
            /** @example BCC Events */
            name?: string;
            recurring_events?: components["schemas"]["RecurringEvent"][];
        };
        RecurringEvent: {
            /** @example Weekly Team Meeting */
            title?: string;
            /**
             * @description Number of individual events with this title
             * @example 4
             */
            event_count?: number;
            events?: components["schemas"]["Event"][];
        };
        Event: {
            /** @example 1 */
            id?: number;
            /** @example Weekly Team Meeting */
            title?: string;
            /**
             * Format: date-time
             * @example 2024-01-15T10:00:00Z
             */
            start_time?: string;
            /**
             * Format: date-time
             * @example 2024-01-15T11:00:00Z
             */
            end_time?: string;
            /** @example Weekly sync meeting for the development team */
            description?: string;
            /** @example Conference Room A */
            location?: string;
            /** @example weekly-meeting-001@example.com */
            uid?: string;
        };
        Group: {
            /** @example 1 */
            id?: number;
            /** @example BCC Events */
            name?: string;
            /** @example exter */
            domain_key?: string;
        };
        AssignmentRule: {
            /** @example 1 */
            id?: number;
            /**
             * @example title_contains
             * @enum {string}
             */
            rule_type?: "title_contains" | "description_contains";
            /** @example Event */
            rule_value?: string;
            /** @example 1 */
            target_group_id?: number;
        };
        Filter: {
            /** @example 1 */
            id?: number;
            /** @example BCC Events + Work Meetings */
            name?: string;
            /**
             * @description Present for user calendar filters
             * @example 1
             */
            calendar_id?: number;
            /**
             * @description Present for domain calendar filters
             * @example exter
             */
            domain_key?: string;
            /** @example john_doe */
            username?: string;
            /** @example [
             *       1,
             *       2,
             *       5
             *     ] */
            subscribed_event_ids?: number[];
            /**
             * @description Only present for domain calendar filters
             * @example [
             *       1,
             *       3
             *     ]
             */
            subscribed_group_ids?: number[];
            /**
             * Format: uuid
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            link_uuid?: string;
            /** @example /ical/550e8400-e29b-41d4-a716-446655440000.ics */
            export_url?: string;
        };
        Error: {
            /** @example Invalid calendar URL */
            error?: string;
            /** @example The provided URL is not a valid iCal endpoint */
            detail?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
