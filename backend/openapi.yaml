openapi: 3.0.0
info:
  title: iCal Viewer API
  version: 1.0.0
  description: Contract-first API for iCal calendar management with domain support
  servers:
    - url: http://localhost:3000
      description: Development server

paths:
  # Regular calendar management (user-added calendars)
  /calendars:
    post:
      summary: Add a user calendar
      parameters:
        - name: username
          in: query
          schema:
            type: string
          description: Optional username to associate the calendar with
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, source_url]
              properties:
                name:
                  type: string
                  example: "My Work Calendar"
                source_url:
                  type: string
                  format: uri
                  example: "https://example.com/calendar.ics"
      responses:
        '201':
          description: Calendar created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Calendar'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      summary: List user calendars
      parameters:
        - name: username
          in: query
          schema:
            type: string
          description: Optional username to filter by
      responses:
        '200':
          description: List of calendars
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Calendar'

  /calendars/{calendarId}:
    delete:
      summary: Delete a user calendar
      parameters:
        - name: calendarId
          in: path
          required: true
          schema:
            type: integer
        - name: username
          in: query
          schema:
            type: string
      responses:
        '204':
          description: Calendar deleted
        '404':
          description: Calendar not found

  /calendars/{calendarId}/events:
    get:
      summary: Get calendar events (flat structure for user calendars)
      parameters:
        - name: calendarId
          in: path
          required: true
          schema:
            type: integer
        - name: username
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Calendar events
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
        '404':
          description: Calendar not found

  /calendars/{calendarId}/filters:
    post:
      summary: Create filter for user calendar
      parameters:
        - name: calendarId
          in: path
          required: true
          schema:
            type: integer
        - name: username
          in: query
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  example: "Work meetings only"
                subscribed_event_ids:
                  type: array
                  items:
                    type: integer
                  example: [1, 2, 5]
      responses:
        '201':
          description: Filter created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
        '400':
          description: Invalid input
        '404':
          description: Calendar not found
    
    get:
      summary: List filters for user calendar
      parameters:
        - name: calendarId
          in: path
          required: true
          schema:
            type: integer
        - name: username
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Filter'
        '404':
          description: Calendar not found

  # Domain-specific endpoints (auto-created from domains.yaml)
  /domains/{domain}/events:
    get:
      summary: Get domain calendar events (grouped structure)
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
          example: "exter"
        - name: username
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Domain events with groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainEventsResponse'
        '404':
          description: Domain not found

  /domains/{domain}/groups:
    get:
      summary: Get groups for domain calendar
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '404':
          description: Domain not found
    
    post:
      summary: Create a new group (admin)
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  example: "BCC Events"
      responses:
        '201':
          description: Group created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Invalid input
        '404':
          description: Domain not found

  /domains/{domain}/groups/{groupId}/assign-recurring-events:
    put:
      summary: Manually assign recurring events to group (admin)
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recurring_event_titles:
                  type: array
                  items:
                    type: string
                  example: ["Weekly Team Meeting", "Monthly Review"]
      responses:
        '200':
          description: Recurring events assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "2 recurring events assigned to group"
        '404':
          description: Domain or group not found

  /domains/{domain}/assignment-rules:
    post:
      summary: Create auto-assignment rule (admin)
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [rule_type, rule_value, target_group_id]
              properties:
                rule_type:
                  type: string
                  enum: [title_contains, description_contains]
                  example: "title_contains"
                rule_value:
                  type: string
                  example: "Event"
                target_group_id:
                  type: integer
                  example: 1
      responses:
        '201':
          description: Rule created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignmentRule'
        '400':
          description: Invalid input
        '404':
          description: Domain not found

    get:
      summary: List assignment rules for domain
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of assignment rules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssignmentRule'

  /domains/{domain}/filters:
    post:
      summary: Create filter for domain calendar
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
        - name: username
          in: query
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  example: "BCC Events + Selected Meetings"
                subscribed_event_ids:
                  type: array
                  items:
                    type: integer
                  example: [1, 2, 5]
                subscribed_group_ids:
                  type: array
                  items:
                    type: integer
                  example: [1, 3]
      responses:
        '201':
          description: Filter created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
        '400':
          description: Invalid input
        '404':
          description: Domain not found
    
    get:
      summary: List filters for domain calendar
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
        - name: username
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Filter'
        '404':
          description: Domain not found

  # Dynamic iCal Export
  /ical/{uuid}.ics:
    get:
      summary: Export filtered calendar as iCal file
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Filtered iCal file
          content:
            text/calendar:
              schema:
                type: string
                example: |
                  BEGIN:VCALENDAR
                  VERSION:2.0
                  PRODID:-//iCal Viewer//EN
                  BEGIN:VEVENT
                  UID:example@icalviewer.com
                  DTSTART:20241201T100000Z
                  DTEND:20241201T110000Z
                  SUMMARY:Team Meeting
                  END:VEVENT
                  END:VCALENDAR
        '404':
          description: Filter not found

components:
  schemas:
    Calendar:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "My Work Calendar"
        source_url:
          type: string
          format: uri
          example: "https://example.com/calendar.ics"
        type:
          type: string
          enum: [user, domain]
          example: "user"
        domain_key:
          type: string
          description: "Only present for domain calendars"
          example: "exter"
        username:
          type: string
          example: "john_doe"
        last_fetched:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    DomainEventsResponse:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupWithEvents'
          description: "All events organized into groups. Ungrouped events are automatically assigned to 'Other Recurring Events' or 'Special Events' groups."

    GroupWithEvents:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: "Group ID. Auto-created groups use string IDs like 'exter_auto_recurring'"
        name:
          type: string
          example: "BCC Events"
          description: "Group name. Auto-created groups use names like '📅 Other Recurring Events' or '🎯 Special Events'"
        recurring_events:
          type: array
          items:
            $ref: '#/components/schemas/RecurringEvent'
          description: "All events in this group, including both manually assigned and auto-assigned events"

    RecurringEvent:
      type: object
      properties:
        title:
          type: string
          example: "Weekly Team Meeting"
        event_count:
          type: integer
          example: 4
          description: "Number of individual events with this title"
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'

    Event:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Weekly Team Meeting"
        start_time:
          type: string
          format: date-time
          example: "2024-01-15T10:00:00Z"
        end_time:
          type: string
          format: date-time
          example: "2024-01-15T11:00:00Z"
        description:
          type: string
          example: "Weekly sync meeting for the development team"
        location:
          type: string
          example: "Conference Room A"
        uid:
          type: string
          example: "weekly-meeting-001@example.com"

    Group:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "BCC Events"
        domain_key:
          type: string
          example: "exter"

    AssignmentRule:
      type: object
      properties:
        id:
          type: integer
          example: 1
        rule_type:
          type: string
          enum: [title_contains, description_contains]
          example: "title_contains"
        rule_value:
          type: string
          example: "Event"
        target_group_id:
          type: integer
          example: 1

    Filter:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "BCC Events + Work Meetings"
        calendar_id:
          type: integer
          description: "Present for user calendar filters"
          example: 1
        domain_key:
          type: string
          description: "Present for domain calendar filters"
          example: "exter"
        username:
          type: string
          example: "john_doe"
        subscribed_event_ids:
          type: array
          items:
            type: integer
          example: [1, 2, 5]
        subscribed_group_ids:
          type: array
          items:
            type: integer
          example: [1, 3]
          description: "Only present for domain calendar filters"
        link_uuid:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        export_url:
          type: string
          example: "/ical/550e8400-e29b-41d4-a716-446655440000.ics"

    Error:
      type: object
      properties:
        error:
          type: string
          example: "Invalid calendar URL"
        detail:
          type: string
          example: "The provided URL is not a valid iCal endpoint"