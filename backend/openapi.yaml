openapi: 3.0.0
info:
  title: Filter iCal
  version: 1.0.0
  description: Contract-first API for iCal calendar management with domain support
  servers:
    - url: http://localhost:3000
      description: Development server

paths:
  # Regular calendar management (user-added calendars)
  /api/calendars:
    post:
      summary: Add a user calendar
      parameters:
        - name: username
          in: query
          schema:
            type: string
          description: Optional username to associate the calendar with
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, source_url]
              properties:
                name:
                  type: string
                  example: "My Work Calendar"
                source_url:
                  type: string
                  format: uri
                  example: "https://example.com/calendar.ics"
      responses:
        '201':
          description: Calendar created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Calendar'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      summary: List user calendars
      parameters:
        - name: username
          in: query
          schema:
            type: string
          description: Optional username to filter by
      responses:
        '200':
          description: List of calendars
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Calendar'

  /api/calendars/{calendarId}:
    delete:
      summary: Delete a user calendar
      parameters:
        - name: calendarId
          in: path
          required: true
          schema:
            type: integer
        - name: username
          in: query
          schema:
            type: string
      responses:
        '204':
          description: Calendar deleted
        '404':
          description: Calendar not found

  /api/calendars/{calendarId}/events:
    get:
      summary: Get calendar events (flat structure for user calendars)
      parameters:
        - name: calendarId
          in: path
          required: true
          schema:
            type: integer
        - name: username
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Calendar events
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
        '404':
          description: Calendar not found

  /api/calendars/{calendarId}/filters:
    post:
      summary: Create filter for user calendar
      parameters:
        - name: calendarId
          in: path
          required: true
          schema:
            type: integer
        - name: username
          in: query
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  example: "Work meetings only"
                subscribed_event_ids:
                  type: array
                  items:
                    type: integer
                  example: [1, 2, 5]
                include_future_events:
                  type: boolean
                  default: false
                  description: "Automatically include new recurring events added after filter creation"
      responses:
        '201':
          description: Filter created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
        '400':
          description: Invalid input
        '404':
          description: Calendar not found
    
    get:
      summary: List filters for user calendar
      parameters:
        - name: calendarId
          in: path
          required: true
          schema:
            type: integer
        - name: username
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Filter'
        '404':
          description: Calendar not found

  /api/calendars/{calendarId}/filters/{filterId}:
    delete:
      summary: Delete filter for user calendar
      parameters:
        - name: calendarId
          in: path
          required: true
          schema:
            type: integer
        - name: filterId
          in: path
          required: true
          schema:
            type: integer
        - name: username
          in: query
          schema:
            type: string
      responses:
        '204':
          description: Filter deleted
        '404':
          description: Filter or calendar not found

  # User-level filter management (all filters for a user)
  /api/filters:
    get:
      summary: List all filters for a user (both calendar and domain filters)
      parameters:
        - name: username
          in: query
          required: false
          schema:
            type: string
          description: Username to filter by (if omitted, returns all filters)
      responses:
        '200':
          description: List of filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Filter'
        '400':
          description: Invalid request

  # Generic iCal utilities
  /api/ical/preview:
    post:
      summary: Preview events from an iCal URL
      description: Generic endpoint to fetch and preview events from any iCal URL. Returns up to 10 events for preview. Reusable across the application.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [calendar_url]
              properties:
                calendar_url:
                  type: string
                  format: uri
                  minLength: 10
                  maxLength: 2000
                  example: "https://calendar.google.com/calendar/ical/example/basic.ics"
      responses:
        '200':
          description: iCal preview with events or error
          content:
            application/json:
              schema:
                type: object
                required: [event_count, events]
                properties:
                  event_count:
                    type: integer
                    description: Total number of events found in calendar
                    example: 42
                  events:
                    type: array
                    description: Preview of up to 10 events
                    items:
                      type: object
                      required: [title]
                      properties:
                        title:
                          type: string
                          example: "Team Meeting"
                        start_time:
                          type: string
                          format: date-time
                          nullable: true
                          example: "2025-10-10T10:00:00"
                        end_time:
                          type: string
                          format: date-time
                          nullable: true
                          example: "2025-10-10T11:00:00"
                        location:
                          type: string
                          nullable: true
                          example: "Conference Room A"
                  error:
                    type: string
                    nullable: true
                    description: Error message if preview failed
                    example: null

  # Domain-specific endpoints (auto-created from domains.yaml)

  /api/domains:
    get:
      summary: List all available domains
      description: Get list of all domains configured in the system. No authentication required. Returns basic domain information including group counts.
      tags:
        - Domains
      responses:
        '200':
          description: List of all domains
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    domain_key:
                      type: string
                      example: "exter"
                      description: Unique identifier for the domain
                    name:
                      type: string
                      example: "Exter Kalendar"
                      description: Human-readable domain name
                    calendar_url:
                      type: string
                      format: uri
                      example: "https://widgets.bcc.no/ical-4fea7cc56289cdfc/35490/Portal-Calendar.ics"
                      description: Source calendar URL
                    group_count:
                      type: integer
                      example: 12
                      description: Number of groups in this domain
                    has_user_password:
                      type: boolean
                      example: false
                      description: Whether the domain requires a user password
                    has_admin_password:
                      type: boolean
                      example: true
                      description: Whether the domain requires an admin password
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/domains/{domain}/events:
    get:
      summary: Get domain calendar events (grouped structure)
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
          example: "exter"
        - name: username
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Domain events with groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainEventsResponse'
        '404':
          description: Domain not found

  /api/domains/{domain}/groups:
    get:
      summary: Get groups for domain calendar
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '404':
          description: Domain not found
    
    post:
      summary: Create a new group (admin)
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  example: "BCC Events"
      responses:
        '201':
          description: Group created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Invalid input
        '404':
          description: Domain not found

  /api/domains/{domain}/groups/{groupId}/assign-recurring-events:
    put:
      summary: Manually assign recurring events to group (admin)
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recurring_event_titles:
                  type: array
                  items:
                    type: string
                  example: ["Weekly Team Meeting", "Monthly Review"]
      responses:
        '200':
          description: Recurring events assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "2 recurring events assigned to group"
        '404':
          description: Domain or group not found

  /api/domains/{domain}/groups/{groupId}/remove-events:
    put:
      summary: Remove events from specific group (admin)
      description: Remove recurring events from a specific group while preserving assignments to other groups
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [recurring_event_titles]
              properties:
                recurring_event_titles:
                  type: array
                  items:
                    type: string
                  example: ["Weekly Team Meeting", "Monthly Review"]
      responses:
        '200':
          description: Events successfully removed from group
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "2 events removed from group"
                  removed_count:
                    type: integer
                    example: 2
        '400':
          description: Invalid input
        '404':
          description: Domain or group not found

  /api/domains/{domain}/assignment-rules:
    post:
      summary: Create auto-assignment rule (admin)
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [rule_type, rule_value, target_group_id]
              properties:
                rule_type:
                  type: string
                  enum: [title_contains, description_contains]
                  example: "title_contains"
                rule_value:
                  type: string
                  example: "Event"
                target_group_id:
                  type: integer
                  example: 1
      responses:
        '201':
          description: Rule created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignmentRule'
        '400':
          description: Invalid input
        '404':
          description: Domain not found

    get:
      summary: List assignment rules for domain
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of assignment rules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssignmentRule'

  /api/domains/{domain}/filters:
    post:
      summary: Create filter for domain calendar
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
        - name: username
          in: query
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  example: "BCC Events + Selected Meetings"
                subscribed_event_ids:
                  type: array
                  items:
                    type: string
                  example: ["Special Conference", "One-time Meeting"]
                  description: "Manual whitelist: event titles to include that are NOT in subscribed groups"
                subscribed_group_ids:
                  type: array
                  items:
                    type: integer
                  example: [1, 3]
                  description: "Group subscriptions: all events in these groups (including future ones) are automatically included"
                unselected_event_ids:
                  type: array
                  items:
                    type: string
                  example: ["Daily Standup"]
                  description: "Manual blacklist: event titles to exclude from subscribed groups"
                  default: []
      responses:
        '201':
          description: Filter created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
        '400':
          description: Invalid input
        '404':
          description: Domain not found
    
    get:
      summary: List filters for domain calendar
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
        - name: username
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Filter'
        '404':
          description: Domain not found

  /api/domains/{domain}/filters/{filterId}:
    delete:
      summary: Delete filter for domain calendar
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
        - name: filterId
          in: path
          required: true
          schema:
            type: integer
        - name: username
          in: query
          schema:
            type: string
      responses:
        '204':
          description: Filter deleted
        '404':
          description: Filter or domain not found

  # Domain Configuration Backups
  /api/domains/{domain}/backups:
    post:
      summary: Create a backup of current domain configuration
      description: Creates a snapshot of all groups, assignments, and rules for the domain
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
          example: "exter"
        - name: description
          in: query
          schema:
            type: string
          description: Optional description for the backup
          example: "Before major restructuring"
      responses:
        '201':
          description: Backup created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainBackup'
        '404':
          description: Domain not found
        '500':
          description: Backup creation failed

    get:
      summary: List all backups for a domain
      description: Returns all configuration snapshots ordered by creation date (newest first)
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
          example: "exter"
      responses:
        '200':
          description: List of backups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DomainBackup'
        '404':
          description: Domain not found

  /api/domains/{domain}/backups/{backupId}:
    delete:
      summary: Delete a backup
      description: Permanently deletes a backup snapshot
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
          example: "exter"
        - name: backupId
          in: path
          required: true
          schema:
            type: integer
          example: 42
      responses:
        '200':
          description: Backup deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Backup deleted successfully"
        '404':
          description: Backup or domain not found

  /api/domains/{domain}/backups/{backupId}/restore:
    post:
      summary: Restore domain from a backup
      description: Restores all groups, assignments, and rules from a backup snapshot. Current configuration is automatically backed up first.
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
          example: "exter"
        - name: backupId
          in: path
          required: true
          schema:
            type: integer
          example: 42
      responses:
        '200':
          description: Configuration restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Domain restored from backup"
                  auto_backup_id:
                    type: integer
                    description: ID of the auto-created backup before restore
                    example: 43
        '404':
          description: Backup or domain not found
        '500':
          description: Restore failed

  /api/domains/{domain}/backups/{backupId}/download:
    get:
      summary: Download a backup as YAML file
      description: Downloads the backup configuration as a YAML file
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
          example: "exter"
        - name: backupId
          in: path
          required: true
          schema:
            type: integer
          example: 42
      responses:
        '200':
          description: YAML configuration file
          content:
            application/x-yaml:
              schema:
                type: string
                example: |
                  domain: exter
                  calendars:
                    - name: "Exter Event Calendar"
                      url: "https://example.com/calendar.ics"
                  groups:
                    - id: "fussball"
                      name: "⚽ Fußball"
                      description: "Football activities"
        '404':
          description: Backup or domain not found

  # Domain Authentication
  /api/domains/{domain}/auth/verify-admin:
    post:
      summary: Verify admin password and get JWT token
      description: Authenticate with admin password and receive JWT token with 30-day expiry
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
          example: "exter"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  example: "admin_password_123"
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                    description: JWT token for authentication
                  message:
                    type: string
        '401':
          description: Invalid password

  /api/domains/{domain}/auth/verify-user:
    post:
      summary: Verify user password and get JWT token
      description: Authenticate with user password and receive JWT token with 30-day expiry
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
          example: "exter"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  example: "user_password_123"
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                    description: JWT token for authentication
                  message:
                    type: string
        '401':
          description: Invalid password

  /api/domains/{domain}/auth/set-admin-password:
    patch:
      summary: Set admin password for domain
      description: Set or change admin password (requires admin JWT)
      security:
        - bearerAuth: []
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
          example: "exter"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  minLength: 8
                  example: "new_admin_password"
      responses:
        '200':
          description: Password set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Invalid password format
        '401':
          description: Unauthorized

  /api/domains/{domain}/auth/set-user-password:
    patch:
      summary: Set user password for domain
      description: Set or change user password (requires admin JWT)
      security:
        - bearerAuth: []
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
          example: "exter"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  minLength: 8
                  example: "new_user_password"
      responses:
        '200':
          description: Password set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Invalid password format
        '401':
          description: Unauthorized

  /api/domains/{domain}/auth/remove-admin-password:
    delete:
      summary: Remove admin password for domain
      description: Remove admin password protection (requires admin JWT)
      security:
        - bearerAuth: []
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
          example: "exter"
      responses:
        '200':
          description: Password removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized

  /api/domains/{domain}/auth/remove-user-password:
    delete:
      summary: Remove user password for domain
      description: Remove user password protection (requires admin JWT)
      security:
        - bearerAuth: []
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
          example: "exter"
      responses:
        '200':
          description: Password removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized

  /api/domains/{domain}/auth/status:
    get:
      summary: Check password status for domain
      description: Check if domain has passwords set (no authentication required)
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
          example: "exter"
      responses:
        '200':
          description: Password status
          content:
            application/json:
              schema:
                type: object
                properties:
                  admin_password_set:
                    type: boolean
                  user_password_set:
                    type: boolean

  /api/admin/domains-auth:
    get:
      summary: Get auth status for all domains
      description: List password status for all domains (requires global admin password)
      security:
        - basicAuth: []
      responses:
        '200':
          description: List of domain auth statuses
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    domain_key:
                      type: string
                    admin_password_set:
                      type: boolean
                    user_password_set:
                      type: boolean
                    owner_id:
                      type: integer
                      nullable: true
                    owner_username:
                      type: string
                      nullable: true
                    created_at:
                      type: string
                      format: date-time
                    updated_at:
                      type: string
                      format: date-time
        '401':
          description: Unauthorized

  /api/admin/domains/{domain}/passwords:
    patch:
      summary: Set domain passwords (global admin only)
      description: Set or remove domain passwords (requires global admin password)
      security:
        - basicAuth: []
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
          example: "exter"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                admin_password:
                  type: string
                  minLength: 8
                user_password:
                  type: string
                  minLength: 8
                remove_admin_password:
                  type: boolean
                  default: false
                remove_user_password:
                  type: boolean
                  default: false
      responses:
        '200':
          description: Passwords updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Invalid request
        '401':
          description: Unauthorized

  # Dynamic iCal Export
  /ical/{uuid}.ics:
    get:
      summary: Export filtered calendar as iCal file
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Filtered iCal file
          content:
            text/calendar:
              schema:
                type: string
                example: |
                  BEGIN:VCALENDAR
                  VERSION:2.0
                  PRODID:-//Filter iCal//EN
                  BEGIN:VEVENT
                  UID:example@filter-ical.de
                  DTSTART:20241201T100000Z
                  DTEND:20241201T110000Z
                  SUMMARY:Team Meeting
                  END:VEVENT
                  END:VCALENDAR
        '404':
          description: Filter not found

  # User Authentication & Profile
  /api/users/register:
    post:
      summary: Register new user account
      description: Create a new user account. Email is required if password is provided.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponse'
        '400':
          description: Invalid input
        '409':
          description: Username or email already taken

  /api/users/login:
    post:
      summary: Login to user account
      description: Authenticate with username and password (if account has password set)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponse'
        '401':
          description: Invalid credentials
        '403':
          description: Account locked

  /api/users/check/{username}:
    get:
      summary: Check username password requirement
      description: |
        Check if a username exists and whether it requires a password for login.
        Returns 404 if username doesn't exist.

        **Note:** This endpoint reveals which usernames exist in the system. This is
        acceptable for this application because usernames are already public (used for
        public calendar sharing). For applications requiring username privacy, this
        endpoint should not be implemented.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: Username to check
      responses:
        '200':
          description: Username exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: The username that was checked
                  exists:
                    type: boolean
                    description: Always true for successful response
                  has_password:
                    type: boolean
                    description: True if account requires password for login
                example:
                  username: "john"
                  exists: true
                  has_password: true
        '404':
          description: Username not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/me:
    get:
      summary: Get current user profile
      description: Get authenticated user's profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized

    patch:
      summary: Update user profile
      description: Update email or password. Email required if password is being set.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '409':
          description: Email already taken

  /api/users/me/domains:
    get:
      summary: Get user's domains
      description: Get all domains owned by or administered by the current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User's domains
          content:
            application/json:
              schema:
                type: object
                properties:
                  owned_domains:
                    type: array
                    items:
                      $ref: '#/components/schemas/DomainInfo'
                    description: Domains where user is the owner
                  admin_domains:
                    type: array
                    items:
                      $ref: '#/components/schemas/DomainInfo'
                    description: Domains where user is an admin (but not owner)
        '401':
          description: Unauthorized

  # Domain Admin Management
  /api/domains/{domain}/admins:
    get:
      summary: List domain admins
      description: Get list of all admins for a domain (owner or admin access required)
      security:
        - bearerAuth: []
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
          example: "soccer-club"
      responses:
        '200':
          description: List of admins
          content:
            application/json:
              schema:
                type: object
                properties:
                  owner:
                    $ref: '#/components/schemas/UserInfo'
                  admins:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserInfo'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - not owner or admin
        '404':
          description: Domain not found

    post:
      summary: Add domain admin
      description: Add a user as admin for the domain (owner access required)
      security:
        - bearerAuth: []
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
          example: "soccer-club"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username]
              properties:
                username:
                  type: string
                  example: "john_doe"
      responses:
        '201':
          description: Admin added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Invalid input or user not found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - not owner
        '404':
          description: Domain not found
        '409':
          description: User is already an admin

  /api/domains/{domain}/admins/{username}:
    delete:
      summary: Remove domain admin
      description: Remove a user from domain admins (owner access required)
      security:
        - bearerAuth: []
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
          example: "soccer-club"
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: "john_doe"
      responses:
        '200':
          description: Admin removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - not owner
        '404':
          description: Domain or admin not found

  # Domain Requests (User-facing)
  /api/domain-requests:
    post:
      summary: Submit a custom domain request
      description: Users can request their own custom domain calendar to be set up. Requires authentication. User's email will be automatically used from their profile.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainRequestCreate'
      responses:
        '201':
          description: Domain request submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainRequest'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Admin Panel (Password-Protected)
  /api/admin/domain-requests:
    get:
      summary: List all domain requests (admin only)
      description: Get all domain requests with optional status filtering
      security:
        - AdminPassword: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, rejected]
          description: Filter by request status
      responses:
        '200':
          description: List of domain requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DomainRequest'
        '401':
          description: Unauthorized - invalid admin password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/admin/domain-requests/{requestId}/approve:
    patch:
      summary: Approve a domain request (admin only)
      description: Approve the request and automatically create domain calendar
      security:
        - AdminPassword: []
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                domain_key:
                  type: string
                  description: Custom domain key to use (auto-generated from username if not provided)
                  example: "johns_calendar"
      responses:
        '200':
          description: Domain request approved and calendar created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Domain request approved and calendar created"
                  domain_key:
                    type: string
                    example: "johns_calendar"
                  calendar_id:
                    type: integer
                    example: 42
        '401':
          description: Unauthorized - invalid admin password
        '404':
          description: Request not found
        '409':
          description: Domain key already exists

  /api/admin/domain-requests/{requestId}/reject:
    patch:
      summary: Reject a domain request (admin only)
      description: Reject the domain request with optional reason
      security:
        - AdminPassword: []
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  example: "Calendar URL is not accessible"
      responses:
        '200':
          description: Domain request rejected
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Domain request rejected"
        '401':
          description: Unauthorized - invalid admin password
        '404':
          description: Request not found

  /api/admin/domains:
    post:
      summary: Create domain directly (admin only)
      description: Allows admin to create a domain without going through the request/approval process
      security:
        - AdminPassword: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - domain_key
                - name
                - calendar_url
                - admin_password
              properties:
                domain_key:
                  type: string
                  minLength: 3
                  maxLength: 100
                  pattern: '^[a-z0-9-]+$'
                  example: "company-events"
                  description: "Unique domain key (lowercase letters, numbers, hyphens only). Display name auto-generated from this."
                name:
                  type: string
                  minLength: 1
                  maxLength: 200
                  example: "Company Events"
                  description: "Display name for the domain (auto-filled from domain_key with capitalization)"
                calendar_url:
                  type: string
                  minLength: 10
                  maxLength: 1000
                  example: "https://example.com/calendar.ics"
                  description: "Source iCal URL"
                admin_password:
                  type: string
                  minLength: 4
                  maxLength: 100
                  example: "admin123"
                  description: "Required admin password for the domain"
                user_password:
                  type: string
                  minLength: 4
                  maxLength: 100
                  nullable: true
                  example: "user123"
                  description: "Optional user password for the domain"
                owner_username:
                  type: string
                  nullable: true
                  example: "john_doe"
                  description: "Optional username to assign as domain owner. If not provided, main admin will be the owner."
      responses:
        '201':
          description: Domain created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Domain 'company-events' created successfully"
                  domain_key:
                    type: string
                    example: "company-events"
                  name:
                    type: string
                    example: "Company Events Calendar"
                  calendar_url:
                    type: string
                    example: "https://example.com/calendar.ics"
                  domain_id:
                    type: integer
                    example: 42
                  calendar_id:
                    type: integer
                    example: 15
                  owner_username:
                    type: string
                    nullable: true
                    example: "john_doe"
                  has_admin_password:
                    type: boolean
                    example: true
                  has_user_password:
                    type: boolean
                    example: false
        '401':
          description: Unauthorized - invalid admin authentication
        '404':
          description: Owner username not found
        '409':
          description: Domain key already exists
        '422':
          description: Validation error (invalid domain key format or URL)

  /api/admin/users/search:
    get:
      summary: Search users (admin only)
      description: Search for users by username or email for assignment operations
      security:
        - AdminPassword: []
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 1
          description: Search query (username or email)
        - name: limit
          in: query
          schema:
            type: integer
            maximum: 50
            default: 10
          description: Maximum number of results
      responses:
        '200':
          description: User search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 42
                        username:
                          type: string
                          example: "john_doe"
                        email:
                          type: string
                          nullable: true
                          example: "john@example.com"
                        role:
                          type: string
                          example: "user"
        '401':
          description: Unauthorized - invalid admin authentication

  /api/admin/domains/{domainKey}/owner:
    patch:
      summary: Assign or remove domain owner (admin only)
      description: Assign a domain to a user or remove the owner assignment
      security:
        - AdminPassword: []
      parameters:
        - name: domainKey
          in: path
          required: true
          schema:
            type: string
          example: "company-events"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  nullable: true
                  example: 42
                  description: "User ID to assign as owner, or null to remove owner"
      responses:
        '200':
          description: Owner assigned or removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Owner assigned successfully"
                  domain_key:
                    type: string
                    example: "company-events"
                  owner_id:
                    type: integer
                    nullable: true
                    example: 42
                  owner_username:
                    type: string
                    nullable: true
                    example: "john_doe"
        '401':
          description: Unauthorized - invalid admin authentication
        '404':
          description: Domain or user not found

components:
  securitySchemes:
    AdminPassword:
      type: http
      scheme: basic
      description: Admin password authentication (username is ignored, only password is validated)

    basicAuth:
      type: http
      scheme: basic
      description: HTTP Basic Authentication for global admin access

    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer token for domain-level authentication

  schemas:
    # User Authentication & Profile Schemas
    UserRegisterRequest:
      type: object
      required: [username]
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: "john_doe"
        email:
          type: string
          format: email
          nullable: true
          example: "john@example.com"
          description: "Email address - REQUIRED if password is provided"
        password:
          type: string
          nullable: true
          minLength: 8
          example: "SecurePass123"
          description: "Password - if provided, email is required"

    UserLoginRequest:
      type: object
      required: [username]
      properties:
        username:
          type: string
          example: "john_doe"
        password:
          type: string
          nullable: true
          example: "SecurePass123"
          description: "Only required if account has password set"

    UpdateProfileRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          nullable: true
          example: "john@example.com"
        password:
          type: string
          nullable: true
          minLength: 8
          example: "NewSecurePass123"
          description: "New password - if provided, email must be set"
        current_password:
          type: string
          nullable: true
          example: "OldSecurePass123"
          description: "Required if changing password on password-protected account"

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          nullable: true
          example: "john@example.com"
        role:
          type: string
          enum: [user, global_admin]
          example: "user"
        has_password:
          type: boolean
          example: true
          description: "Whether user has set a password"
        created_at:
          type: string
          format: date-time
          example: "2025-01-10T14:23:15Z"

    AuthTokenResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: "JWT bearer token"
        expires_in_days:
          type: integer
          example: 30
        user:
          $ref: '#/components/schemas/UserResponse'

    UserInfo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          nullable: true
          example: "john@example.com"

    DomainInfo:
      type: object
      properties:
        domain_key:
          type: string
          example: "soccer-club"
        name:
          type: string
          example: "Soccer Club Calendar"
        calendar_url:
          type: string
          format: uri
          example: "https://example.com/calendar.ics"
        status:
          type: string
          enum: [active, inactive, pending]
          example: "active"
        created_at:
          type: string
          format: date-time
          example: "2025-01-10T14:23:15Z"

    # Domain Request Schemas
    DomainRequestCreate:
      type: object
      required: [requested_domain_key, calendar_url, description]
      properties:
        requested_domain_key:
          type: string
          minLength: 3
          maxLength: 100
          pattern: '^[a-z0-9-]+$'
          example: "soccer-club"
          description: "Desired domain key (lowercase letters, numbers, hyphens only)"
        calendar_url:
          type: string
          format: uri
          example: "https://example.com/calendar.ics"
          description: "iCal URL for the custom domain calendar"
        description:
          type: string
          minLength: 10
          maxLength: 500
          example: "I would like to set up a calendar for my soccer club events with custom groups and filters"
          description: "Explanation of what the user wants to do with the custom domain"
        default_password:
          type: string
          nullable: true
          minLength: 4
          maxLength: 100
          example: "MySecurePass123"
          description: "Default admin password for the domain (optional - leave blank for password-free access)"

    DomainRequest:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: "Unique request ID"
        username:
          type: string
          example: "john_doe"
          description: "Username of the requester"
        email:
          type: string
          format: email
          example: "john@example.com"
          description: "Email address of the requester"
        requested_domain_key:
          type: string
          example: "soccer-club"
          description: "Requested domain key"
        calendar_url:
          type: string
          format: uri
          example: "https://example.com/calendar.ics"
          description: "iCal URL for the custom domain"
        description:
          type: string
          example: "I would like to set up a calendar for my soccer club events"
          description: "User's explanation of their use case"
        status:
          type: string
          enum: [pending, approved, rejected]
          example: "pending"
          description: "Current status of the request"
        created_at:
          type: string
          format: date-time
          example: "2025-01-10T14:23:15Z"
          description: "When the request was submitted"
        reviewed_at:
          type: string
          format: date-time
          nullable: true
          example: "2025-01-11T09:15:30Z"
          description: "When the request was reviewed (approved/rejected)"
        rejection_reason:
          type: string
          nullable: true
          example: "Calendar URL is not accessible"
          description: "Reason for rejection (if applicable)"
        domain_key:
          type: string
          nullable: true
          example: "soccer-club"
          description: "Final domain key after approval (may differ from requested)"

    Calendar:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "My Work Calendar"
        source_url:
          type: string
          format: uri
          example: "https://example.com/calendar.ics"
        type:
          type: string
          enum: [user, domain]
          example: "user"
        domain_key:
          type: string
          description: "Only present for domain calendars"
          example: "exter"
        username:
          type: string
          example: "john_doe"
        last_fetched:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    DomainBackup:
      type: object
      properties:
        id:
          type: integer
          example: 42
          description: "Unique backup ID"
        domain_key:
          type: string
          example: "exter"
          description: "Domain this backup belongs to"
        config_snapshot:
          type: object
          description: "Full domain configuration snapshot in YAML-compatible format"
          example:
            domain: "exter"
            groups:
              - id: "fussball"
                name: "⚽ Fußball"
                description: "Football activities"
            assignments:
              fussball:
                - "Football Training"
                - "Match Day"
        created_at:
          type: string
          format: date-time
          example: "2025-01-10T14:23:15Z"
          description: "When the backup was created"
        created_by:
          type: string
          example: "admin"
          description: "User who created the backup (optional)"
          nullable: true
        description:
          type: string
          example: "Before major restructuring"
          description: "Optional backup description"
          nullable: true
        backup_type:
          type: string
          enum: [manual, auto_pre_reset, auto_pre_import, auto_pre_restore]
          example: "manual"
          description: "Type of backup: manual (user-initiated) or automatic"

    DomainEventsResponse:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupWithEvents'
          description: "All events organized into groups. Ungrouped events are automatically assigned to 'Other Recurring Events' or 'Special Events' groups."
        ungrouped_events:
          type: array
          items:
            $ref: '#/components/schemas/RecurringEvent'
          description: "Events that are not assigned to any specific group."

    GroupWithEvents:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: "Group ID. Auto-created groups use string IDs like 'exter_auto_recurring'"
        name:
          type: string
          example: "BCC Events"
          description: "Group name. Auto-created groups use names like '📅 Other Recurring Events' or '🎯 Special Events'"
        recurring_events:
          type: array
          items:
            $ref: '#/components/schemas/RecurringEvent'
          description: "All events in this group, including both manually assigned and auto-assigned events"

    RecurringEvent:
      type: object
      properties:
        title:
          type: string
          example: "Weekly Team Meeting"
        event_count:
          type: integer
          example: 4
          description: "Number of individual events with this title"
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'

    Event:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Weekly Team Meeting"
        start_time:
          type: string
          format: date-time
          example: "2024-01-15T10:00:00Z"
        end_time:
          type: string
          format: date-time
          example: "2024-01-15T11:00:00Z"
        description:
          type: string
          example: "Weekly sync meeting for the development team"
        location:
          type: string
          example: "Conference Room A"
        uid:
          type: string
          example: "weekly-meeting-001@example.com"

    Group:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "BCC Events"
        domain_key:
          type: string
          example: "exter"

    AssignmentRule:
      type: object
      properties:
        id:
          type: integer
          example: 1
        rule_type:
          type: string
          enum: [title_contains, description_contains]
          example: "title_contains"
        rule_value:
          type: string
          example: "Event"
        target_group_id:
          type: integer
          example: 1

    Filter:
      type: object
      description: |
        Filter for calendar events using the three-list model:
        - **subscribed_group_ids**: Groups to subscribe to (all events in group, including future ones)
        - **subscribed_event_ids**: Manual whitelist (event titles NOT in subscribed groups)
        - **unselected_event_ids**: Manual blacklist (event titles FROM subscribed groups to exclude)

        Computation: included_titles = (group_titles ∪ subscribed_event_ids) - unselected_event_ids
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "BCC Events + Work Meetings"
        calendar_id:
          type: integer
          description: "Present for user calendar filters"
          example: 1
        domain_key:
          type: string
          description: "Present for domain calendar filters"
          example: "exter"
        username:
          type: string
          example: "john_doe"
        subscribed_event_ids:
          type: array
          items:
            type: string
          example: ["Special Conference", "One-time Meeting"]
          description: "Manual whitelist: event titles to include that are NOT in subscribed groups. For domain filters, these are event titles (strings). For personal calendar filters, these can be event IDs (integers)."
        subscribed_group_ids:
          type: array
          items:
            type: integer
          example: [1, 3]
          description: "Group subscriptions (domain filters only): all events in these groups, including future recurring events, are automatically included"
        unselected_event_ids:
          type: array
          items:
            type: string
          example: ["Daily Standup"]
          description: "Manual blacklist: event titles to exclude from subscribed groups. Events manually removed from subscribed groups."
          default: []
        include_future_events:
          type: boolean
          nullable: true
          description: "For personal calendars only: If true, automatically include new recurring events added after filter creation. Not applicable to domain calendar filters."
          example: false
        link_uuid:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        export_url:
          type: string
          example: "/ical/550e8400-e29b-41d4-a716-446655440000.ics"

    Error:
      type: object
      properties:
        error:
          type: string
          example: "Invalid calendar URL"
        detail:
          type: string
          example: "The provided URL is not a valid iCal endpoint"