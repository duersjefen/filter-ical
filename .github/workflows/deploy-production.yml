# =============================================================================
# Production Deployment with Manual Approval
# =============================================================================
# Requires manual trigger and approval
# Deploys to: https://filter-ical.de
# =============================================================================

name: Deploy to Production

on:
  workflow_dispatch:  # Manual trigger only
    inputs:
      confirm:
        description: 'Type "deploy" to confirm production deployment'
        required: true
        default: ''

jobs:
  validate-input:
    name: Validate Deployment Request
    runs-on: ubuntu-latest
    steps:
      - name: ‚úÖ Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "deploy" ]; then
            echo "‚ùå Deployment cancelled: confirmation not provided"
            echo "   Please type 'deploy' to confirm"
            exit 1
          fi
          echo "‚úÖ Deployment confirmed"

  deploy-production:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    needs: validate-input

    environment:
      name: production
      url: https://filter-ical.de

    steps:
      - name: üìã Checkout platform repo
        uses: actions/checkout@v4
        with:
          repository: duersjefen/multi-tenant-platform
          path: platform
          token: ${{ github.token }}

      - name: üîë Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: üìä Pre-Deployment Status
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "üìä Current production status:"
          ssh ${EC2_USER}@${EC2_HOST} 'docker ps --filter "name=filter-ical" --format "{{.Names}}: {{.Status}}"' || echo "No containers running"

      - name: üöÄ Deploy to Production
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          DATABASE_URL: ${{ secrets.DATABASE_URL_PRODUCTION }}
          SECRET_KEY: ${{ secrets.SECRET_KEY_PRODUCTION }}
          VITE_API_URL: ${{ vars.VITE_API_URL_PRODUCTION || 'https://filter-ical.de/api' }}
          GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        run: |
          # Create deployment script
          cat > deploy_production.sh << 'DEPLOY_SCRIPT'
          #!/bin/bash
          set -e

          echo "üöÄ Starting production deployment..."
          echo "‚ö†Ô∏è  PRODUCTION DEPLOYMENT - Extra validation enabled"

          # Navigate to platform directory
          cd /opt/multi-tenant-platform

          # Update platform code
          echo "üì¶ Updating platform code..."
          git pull origin main 2>/dev/null || git pull origin master || echo "‚ö†Ô∏è  Using existing platform code"

          # Authenticate to GHCR
          echo "üîë Authenticating to GitHub Container Registry..."
          echo "$GHCR_TOKEN" | docker login ghcr.io -u duersjefen --password-stdin

          # Create env file with secrets
          echo "üìù Creating environment configuration..."
          cat > configs/filter-ical/.env.production << EOF
          # =============================================================================
          # Filter-iCal Production Environment - Generated by GitHub Actions
          # =============================================================================

          # Application Configuration
          ENVIRONMENT=production
          NODE_ENV=production
          DEBUG=false

          # Backend API Secret
          SECRET_KEY=${SECRET_KEY}

          # Database Configuration
          DATABASE_URL=${DATABASE_URL}

          # Frontend Configuration
          VITE_API_URL=${VITE_API_URL}
          EOF

          chmod 600 configs/filter-ical/.env.production

          # Verify database connectivity before deploying
          echo "üîç Verifying database connectivity..."
          if docker exec postgres-platform psql -U filterical_user -d filterical_production -c "SELECT 1;" > /dev/null 2>&1; then
            echo "‚úÖ Database is accessible"
          else
            echo "‚ùå Database connection failed"
            exit 1
          fi

          # Check disk space
          echo "üîç Checking disk space..."
          DISK_AVAIL=$(df -h /opt | tail -1 | awk '{print $4}' | sed 's/G//')
          if (( $(echo "$DISK_AVAIL < 5" | bc -l) )); then
            echo "‚ùå Insufficient disk space: ${DISK_AVAIL}G available (need 5G)"
            exit 1
          fi
          echo "‚úÖ Sufficient disk space: ${DISK_AVAIL}G available"

          # Run deployment
          echo "üö¢ Deploying filter-ical to production..."
          PLATFORM_ROOT=/opt/multi-tenant-platform \
          ENVIRONMENT=production \
          ./lib/deploy.sh filter-ical production

          # Extended verification for production
          echo "üîç Running production verification..."
          sleep 20

          # Check backend health
          MAX_RETRIES=6
          RETRY_COUNT=0
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if docker exec filter-ical-backend-production curl -f http://localhost:3000/health 2>/dev/null; then
              echo "‚úÖ Backend is healthy"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                echo "‚ùå Backend health check failed after $MAX_RETRIES attempts"
                exit 1
              fi
              echo "‚è≥ Waiting for backend... (attempt $RETRY_COUNT/$MAX_RETRIES)"
              sleep 10
            fi
          done

          # Check frontend health
          if docker exec filter-ical-frontend-production curl -f http://127.0.0.1:80/ > /dev/null 2>&1; then
            echo "‚úÖ Frontend is healthy"
          else
            echo "‚ùå Frontend health check failed"
            exit 1
          fi

          # Check no errors in recent logs
          echo "üîç Checking for errors in logs..."
          if docker logs filter-ical-backend-production --since 2m 2>&1 | grep -i "error\|exception\|failed" | grep -v "0 errors"; then
            echo "‚ö†Ô∏è  Found errors in backend logs (review recommended)"
          else
            echo "‚úÖ No errors in backend logs"
          fi

          echo "‚úÖ Production deployment complete!"
          echo "üåê Application is live at https://filter-ical.de"
          DEPLOY_SCRIPT

          # Copy script to EC2 and execute
          scp -o StrictHostKeyChecking=no deploy_production.sh ${EC2_USER}@${EC2_HOST}:/tmp/
          ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} \
            "GHCR_TOKEN='${{ secrets.GHCR_TOKEN }}' \
             SECRET_KEY='${SECRET_KEY}' \
             DATABASE_URL='${DATABASE_URL}' \
             VITE_API_URL='${VITE_API_URL}' \
             bash /tmp/deploy_production.sh"

      - name: üß™ Run Post-Deployment Tests
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "üß™ Running production smoke tests..."

          # Test backend API health endpoint
          ssh ${EC2_USER}@${EC2_HOST} \
            'docker exec filter-ical-backend-production curl -f http://localhost:3000/health' || exit 1

          # Test frontend
          ssh ${EC2_USER}@${EC2_HOST} \
            'docker exec filter-ical-frontend-production curl -f http://127.0.0.1:80/ > /dev/null' || exit 1

          # Check container status
          ssh ${EC2_USER}@${EC2_HOST} \
            'docker ps --filter "name=filter-ical-backend-production" --format "{{.Status}}" | grep -q "healthy"' || exit 1

          echo "‚úÖ All production smoke tests passed"

      - name: üìä Post-Deployment Status
        if: success()
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "üìä Production deployment status:"
          ssh ${EC2_USER}@${EC2_HOST} 'docker ps --filter "name=filter-ical" --format "table {{.Names}}\t{{.Status}}\t{{.Size}}"'

      - name: üì¢ Deployment Success
        if: success()
        run: |
          echo "‚úÖ PRODUCTION DEPLOYMENT SUCCESSFUL!"
          echo ""
          echo "üåê URL: https://filter-ical.de"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üë§ Deployed by: ${{ github.actor }}"
          echo "üïí Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "üìä Monitor at: http://${{ secrets.EC2_HOST }}:3001 (Grafana)"

      - name: üîÑ Rollback on Failure
        if: failure()
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "‚ùå PRODUCTION DEPLOYMENT FAILED!"
          echo "üîÑ Initiating automatic rollback..."

          ssh ${EC2_USER}@${EC2_HOST} \
            'cd /opt/multi-tenant-platform && ./lib/rollback.sh filter-ical production' || {
              echo "‚ùå Rollback script failed!"
              echo "‚ö†Ô∏è  MANUAL INTERVENTION REQUIRED"
              echo "   SSH to EC2 and run: cd /opt/multi-tenant-platform && ./lib/rollback.sh filter-ical production"
              exit 1
            }

          echo "‚úÖ Rollback completed successfully"
          echo "üîç Verifying rollback..."

          # Verify rolled back version is healthy
          sleep 10
          ssh ${EC2_USER}@${EC2_HOST} \
            'docker exec filter-ical-backend-production curl -f http://localhost:3000/health' && \
            echo "‚úÖ Rolled back version is healthy" || \
            echo "‚ö†Ô∏è  Manual verification required"

          exit 1

      - name: üìù Create Deployment Record
        if: success()
        run: |
          cat > deployment-record.txt << EOF
          Deployment Record
          =================
          Environment: Production
          Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          Commit: ${{ github.sha }}
          Deployed by: ${{ github.actor }}
          Status: Success
          URL: https://filter-ical.de

          Images Deployed:
          - ghcr.io/duersjefen/filter-ical-backend:latest
          - ghcr.io/duersjefen/filter-ical-frontend:latest

          Health Checks: Passed
          Rollback Available: Yes
          EOF
          cat deployment-record.txt

      - name: üíæ Upload Deployment Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-record-${{ github.run_number }}
          path: deployment-record.txt
          retention-days: 90
