# =============================================================================
# Production Deployment with Manual Approval
# =============================================================================
# Requires manual trigger and approval
# Deploys to: https://filter-ical.de
# =============================================================================

name: Deploy to Production

on:
  workflow_dispatch:  # Manual trigger only
    inputs:
      confirm:
        description: 'Type "deploy" to confirm production deployment'
        required: true
        default: ''

jobs:
  validate-input:
    name: Validate Deployment Request
    runs-on: ubuntu-latest
    steps:
      - name: ✅ Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "deploy" ]; then
            echo "❌ Deployment cancelled: confirmation not provided"
            echo "   Please type 'deploy' to confirm"
            exit 1
          fi
          echo "✅ Deployment confirmed"

  deploy-production:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    needs: validate-input

    environment:
      name: production
      url: https://filter-ical.de

    steps:
      - name: 🔑 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 📊 Pre-Deployment Status
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "📊 Current production status:"
          ssh ${EC2_USER}@${EC2_HOST} 'docker ps --filter "name=filter-ical" --format "{{.Names}}: {{.Status}}"' || echo "No containers running"

      - name: 🚀 Deploy to Production
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          ssh -i ~/.ssh/id_rsa ${EC2_USER}@${EC2_HOST} << 'REMOTE'
            set -e

            echo "🚀 Starting production deployment..."
            echo "⚠️  PRODUCTION DEPLOYMENT - Extra validation enabled"

            cd /opt/multi-tenant-platform

            # Pull latest platform configs (env files, nginx configs, etc.)
            echo "📥 Pulling latest platform configurations..."
            git fetch origin
            git reset --hard origin/main

            # Verify database connectivity
            echo "🔍 Verifying database connectivity..."
            if docker exec postgres-platform psql -U filterical_user -d filterical_production -c "SELECT 1;" > /dev/null 2>&1; then
              echo "✅ Database is accessible"
            else
              echo "❌ Database connection failed"
              exit 1
            fi

            # Check disk space
            echo "🔍 Checking disk space..."
            DISK_AVAIL=$(df -h /opt | tail -1 | awk '{print $4}' | sed 's/G//')
            if (( $(echo "$DISK_AVAIL < 5" | bc -l) )); then
              echo "❌ Insufficient disk space: ${DISK_AVAIL}G available (need 5G)"
              exit 1
            fi
            echo "✅ Sufficient disk space: ${DISK_AVAIL}G available"

            # Authenticate to GitHub Container Registry
            echo "🔑 Authenticating to GitHub Container Registry..."
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u duersjefen --password-stdin

            # Run deployment
            echo "🚢 Deploying filter-ical to production..."
            PLATFORM_ROOT=/opt/multi-tenant-platform \
            ENVIRONMENT=production \
            ./lib/deploy.sh filter-ical production

            # Extended verification for production
            echo "🔍 Running production verification..."
            sleep 20

            # Check backend health with retries
            MAX_RETRIES=6
            RETRY_COUNT=0
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if docker exec filter-ical-backend-production curl -f http://localhost:3000/health 2>/dev/null; then
                echo "✅ Backend is healthy"
                break
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                  echo "❌ Backend health check failed after $MAX_RETRIES attempts"
                  exit 1
                fi
                echo "⏳ Waiting for backend... (attempt $RETRY_COUNT/$MAX_RETRIES)"
                sleep 10
              fi
            done

            # Check frontend health
            if docker exec filter-ical-frontend-production curl -f http://localhost/health 2>/dev/null || docker exec filter-ical-frontend-production curl -f http://localhost/ 2>/dev/null; then
              echo "✅ Frontend is healthy"
            else
              echo "❌ Frontend health check failed"
              exit 1
            fi

            # Check for errors in logs
            echo "🔍 Checking for errors in logs..."
            if docker logs filter-ical-backend-production --since 2m 2>&1 | grep -i "error\|exception\|failed" | grep -v "0 errors"; then
              echo "⚠️  Found errors in backend logs (review recommended)"
            else
              echo "✅ No errors in backend logs"
            fi

            echo "✅ Production deployment complete!"
            echo "🌐 Application is live at https://filter-ical.de"
          REMOTE

      - name: 🧪 Run External Smoke Tests
        run: |
          echo "🧪 Running external smoke tests..."
          sleep 5

          # Test external HTTPS endpoint
          if ! curl -f -m 10 https://filter-ical.de/ 2>/dev/null; then
            echo "❌ External HTTPS check failed"
            exit 1
          fi
          echo "✅ External HTTPS is working"

          echo "✅ External smoke tests passed"
          echo "⚠️  Note: API smoke tests skipped - backend health verified internally"

      - name: 📊 Post-Deployment Status
        if: success()
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "📊 Production deployment status:"
          ssh ${EC2_USER}@${EC2_HOST} 'docker ps --filter "name=filter-ical" --format "table {{.Names}}\t{{.Status}}\t{{.Size}}"'

      - name: 📢 Deployment Success
        if: success()
        run: |
          echo "✅ PRODUCTION DEPLOYMENT SUCCESSFUL!"
          echo ""
          echo "🌐 URL: https://filter-ical.de"
          echo "📝 Commit: ${{ github.sha }}"
          echo "👤 Deployed by: ${{ github.actor }}"
          echo "🕒 Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "📊 Monitor at: http://${{ secrets.EC2_HOST }}:3001 (Grafana)"

      - name: 📝 Create Deployment Record
        if: success()
        run: |
          cat > deployment-record.txt << EOF
          Deployment Record
          =================
          Environment: Production
          Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          Commit: ${{ github.sha }}
          Deployed by: ${{ github.actor }}
          Status: Success
          URL: https://filter-ical.de

          Images Deployed:
          - ghcr.io/duersjefen/filter-ical-backend:latest
          - ghcr.io/duersjefen/filter-ical-frontend:latest

          Health Checks: Passed
          Rollback Available: Yes
          EOF
          cat deployment-record.txt

      - name: 💾 Upload Deployment Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-record-${{ github.run_number }}
          path: deployment-record.txt
          retention-days: 90
