# =============================================================================
# Automated Staging Deployment
# =============================================================================
# Triggers automatically after successful image build
# Deploys to: https://staging.filter-ical.de
# =============================================================================

name: Deploy to Staging

on:
  workflow_run:
    workflows: ["Build and Push Docker Images"]
    types:
      - completed
    branches:
      - master
  workflow_dispatch:  # Manual trigger option

jobs:
  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    environment:
      name: staging
      url: https://staging.filter-ical.de

    steps:
      - name: 📋 Checkout platform repo
        uses: actions/checkout@v4
        with:
          repository: duersjefen/multi-tenant-platform
          path: platform
          token: ${{ github.token }}

      - name: 🔑 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 🚀 Deploy to Staging
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          DATABASE_URL: ${{ secrets.DATABASE_URL_STAGING }}
          SECRET_KEY: ${{ secrets.SECRET_KEY_STAGING }}
          VITE_API_URL: ${{ vars.VITE_API_URL_STAGING || 'https://staging.filter-ical.de/api' }}
        run: |
          # Create deployment script
          cat > deploy_staging.sh << 'DEPLOY_SCRIPT'
          #!/bin/bash
          set -e

          echo "🚀 Starting staging deployment..."

          # Navigate to platform directory
          cd /opt/multi-tenant-platform

          # Update platform code (force if divergent)
          echo "📦 Updating platform code..."
          git fetch origin 2>/dev/null
          git reset --hard origin/main 2>/dev/null || git reset --hard origin/master 2>/dev/null || echo "⚠️  Using existing platform code"

          # Authenticate to GHCR (using token passed as env var)
          echo "🔑 Authenticating to GitHub Container Registry..."
          echo "$GHCR_TOKEN" | docker login ghcr.io -u duersjefen --password-stdin

          # Create env file with secrets
          echo "📝 Creating environment configuration..."
          cat > configs/filter-ical/.env.staging << EOF
          # =============================================================================
          # Filter-iCal Staging Environment - Generated by GitHub Actions
          # =============================================================================

          # Application Configuration
          ENVIRONMENT=production
          NODE_ENV=production
          DEBUG=true

          # Backend API Secret
          SECRET_KEY=${SECRET_KEY}

          # Database Configuration
          DATABASE_URL=${DATABASE_URL}

          # Frontend Configuration
          VITE_API_URL=${VITE_API_URL}
          BACKEND_HOST=backend
          EOF

          chmod 600 configs/filter-ical/.env.staging

          # Run deployment
          echo "🚢 Deploying filter-ical to staging..."
          PLATFORM_ROOT=/opt/multi-tenant-platform \
          ENVIRONMENT=staging \
          ./lib/deploy.sh filter-ical staging

          # Verify deployment
          echo "🔍 Verifying deployment..."
          sleep 15

          # Check backend health
          if docker exec filter-ical-backend-staging curl -f http://localhost:3000/health 2>/dev/null; then
            echo "✅ Backend is healthy"
          else
            echo "❌ Backend health check failed"
            exit 1
          fi

          echo "✅ Staging deployment complete!"
          DEPLOY_SCRIPT

          # Copy script to EC2 and execute
          scp -o StrictHostKeyChecking=no deploy_staging.sh ${EC2_USER}@${EC2_HOST}:/tmp/
          ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} \
            "GHCR_TOKEN='${{ secrets.GHCR_TOKEN }}' \
             SECRET_KEY='${SECRET_KEY}' \
             DATABASE_URL='${DATABASE_URL}' \
             VITE_API_URL='${VITE_API_URL}' \
             bash /tmp/deploy_staging.sh"

      - name: 🧪 Run Post-Deployment Tests
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "🧪 Testing staging deployment..."

          # Test backend API
          ssh ${EC2_USER}@${EC2_HOST} \
            'docker exec filter-ical-backend-staging curl -f http://localhost:3000/health' || exit 1

          # Test frontend
          ssh ${EC2_USER}@${EC2_HOST} \
            'docker exec filter-ical-frontend-staging curl -f http://127.0.0.1:80/ > /dev/null' || exit 1

          echo "✅ All health checks passed"

      - name: 📢 Deployment Success
        if: success()
        run: |
          echo "✅ Staging deployment successful!"
          echo "🌐 URL: https://staging.filter-ical.de"
          echo "📝 Commit: ${{ github.sha }}"
          echo "👤 Author: ${{ github.actor }}"

      - name: 🔄 Rollback on Failure
        if: failure()
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "❌ Deployment failed! Attempting rollback..."
          ssh ${EC2_USER}@${EC2_HOST} \
            'cd /opt/multi-tenant-platform && ./lib/rollback.sh filter-ical staging' || true
          echo "🔄 Rollback complete"
          exit 1
