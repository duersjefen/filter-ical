name: 'Execute Remote Docker Deployment'
description: 'Deploy applications to remote Docker environment with enterprise-grade reliability'
author: 'Claude Code'

inputs:
  operation:
    description: 'Operation to perform (deploy, rollback, backup, list-backups)'
    required: true
    default: 'deploy'
  containers:
    description: 'Space-separated list of containers to operate on'
    required: true
  nginx_restart:
    description: 'Whether to restart nginx after deployment'
    required: false
    default: 'false'
  nginx_container:
    description: 'Name of nginx container to restart'
    required: false
    default: 'websites-nginx'
  backup_tag:
    description: 'Backup tag for rollback operations (optional - auto-detects if not provided)'
    required: false
    default: ''

outputs:
  deployment_status:
    description: 'Status of the deployment operation'
    value: ${{ steps.get-outputs.outputs.deployment_status }}
  containers_deployed:
    description: 'List of containers that were successfully deployed'
    value: ${{ steps.get-outputs.outputs.containers_deployed }}
  operation_status:
    description: 'Overall operation status (for rollback compatibility)'
    value: ${{ steps.get-outputs.outputs.operation_status }}
  containers_affected:
    description: 'Containers affected by operation'
    value: ${{ steps.get-outputs.outputs.containers_affected }}
  BACKUP_TAG:
    description: 'Backup tag created before deployment'
    value: ${{ steps.get-outputs.outputs.BACKUP_TAG }}

runs:
  using: 'composite'
  steps:
    - name: üê≥ Execute Remote Docker Operation
      id: execute
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_USER }}
        key: ${{ env.EC2_SSH_KEY }}
        debug: true
        envs: AWS_ACCOUNT_ID,AWS_REGION,ECR_REGISTRY,IMAGE_TAG,BRANCH_NAME,BACKUP_TAG,OPERATION
        script: |
          cd /opt/websites

          # CRITICAL: Export required environment variables for docker-compose
          export AWS_ACCOUNT_ID="${AWS_ACCOUNT_ID}"
          export AWS_REGION="${AWS_REGION}"
          export ECR_REGISTRY="${ECR_REGISTRY}"
          export BACKUP_TAG="${BACKUP_TAG}"

          # Create outputs directory
          mkdir -p /tmp/github-actions-outputs
          
          # Make scripts executable
          chmod +x .github/actions/execute-remote-docker/scripts/*.sh || echo "Scripts not found, using fallback"

          echo "üöÄ Starting operation: ${OPERATION}"
          echo "üéØ Target containers: ${{ inputs.containers }}"

          # Validate required variables
          if [ -z "$AWS_ACCOUNT_ID" ] || [ -z "$AWS_REGION" ] || [ -z "$ECR_REGISTRY" ]; then
            echo "‚ùå CRITICAL: Missing required environment variables"
            exit 1
          fi

          # Ensure docker-compose.yml exists
          if [ -f "docker-compose.production.yml" ] && [ ! -f "docker-compose.yml" ]; then
            echo "üîÑ Using docker-compose.production.yml as docker-compose.yml"
            cp docker-compose.production.yml docker-compose.yml
          fi

          # Use modular deploy.sh if available, otherwise fallback
          if [ -f ".github/actions/execute-remote-docker/scripts/deploy.sh" ]; then
            echo "üìú Using modular deployment scripts"

            # Redirect GITHUB_OUTPUT to a file we can retrieve
            export GITHUB_OUTPUT=/tmp/github-actions-outputs/deployment-outputs.txt
            touch "$GITHUB_OUTPUT"

            # Execute deployment script
            .github/actions/execute-remote-docker/scripts/deploy.sh \
              "${OPERATION}" \
              "${{ inputs.containers }}" \
              "${{ inputs.nginx_restart }}" \
              "${{ inputs.nginx_container }}"

            # Capture exit code
            deploy_exit=$?

            # Write operation results
            echo "operation_status=$([ $deploy_exit -eq 0 ] && echo 'success' || echo 'failed')" >> "$GITHUB_OUTPUT"
            echo "containers_affected=${{ inputs.containers }}" >> "$GITHUB_OUTPUT"

            exit $deploy_exit
          else
            echo "‚ö†Ô∏è  Modular scripts not found, using inline fallback"

            # [Keep minimal fallback for backward compatibility]
            containers="${{ inputs.containers }}"

            # Basic ECR auth
            aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ECR_REGISTRY"

            # Pull and deploy
            docker-compose pull $containers
            docker-compose up -d --force-recreate $containers

            # Nginx restart if needed
            if [ "${{ inputs.nginx_restart }}" = "true" ]; then
              docker restart "${{ inputs.nginx_container }}" 2>/dev/null || true
            fi

            # Write outputs
            echo "operation_status=success" > /tmp/github-actions-outputs/deployment-outputs.txt
            echo "containers_affected=$containers" >> /tmp/github-actions-outputs/deployment-outputs.txt
            echo "BACKUP_TAG=" >> /tmp/github-actions-outputs/deployment-outputs.txt
          fi
      env:
        EC2_HOST: ${{ env.EC2_HOST }}
        EC2_USER: ${{ env.EC2_USER }}
        EC2_SSH_KEY: ${{ env.EC2_SSH_KEY }}
        ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
        OPERATION: ${{ inputs.operation }}
        BACKUP_TAG: ${{ inputs.backup_tag }}

    - name: üì§ Retrieve Operation Outputs
      id: get-outputs
      shell: bash
      run: |
        echo "üîç Retrieving operation outputs from server..."

        # Retrieve outputs file via SSH
        OUTPUTS=$(ssh -o StrictHostKeyChecking=no -i <(echo "${{ env.EC2_SSH_KEY }}") \
          ${{ env.EC2_USER }}@${{ env.EC2_HOST }} \
          "cat /tmp/github-actions-outputs/deployment-outputs.txt 2>/dev/null || echo 'operation_status=failed'")

        # Parse and set outputs
        while IFS='=' read -r key value; do
          if [ -n "$key" ] && [ -n "$value" ]; then
            echo "$key=$value" >> $GITHUB_OUTPUT
            echo "   $key=$value"
          fi
        done <<< "$OUTPUTS"

        # Set backward-compatible outputs
        operation_status=$(echo "$OUTPUTS" | grep "^operation_status=" | cut -d'=' -f2)
        containers_affected=$(echo "$OUTPUTS" | grep "^containers_affected=" | cut -d'=' -f2)

        if [ "$operation_status" = "success" ]; then
          echo "deployment_status=success" >> $GITHUB_OUTPUT
          echo "containers_deployed=${containers_affected}" >> $GITHUB_OUTPUT
        else
          echo "deployment_status=failed" >> $GITHUB_OUTPUT
          echo "containers_deployed=" >> $GITHUB_OUTPUT
        fi

        echo "‚úÖ Outputs retrieved successfully"

branding:
  icon: 'cloud'
  color: 'blue'