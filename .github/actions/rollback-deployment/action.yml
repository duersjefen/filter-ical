name: 'Rollback Deployment'
description: 'Pure function: orchestrates safe rollback to previous deployment state'
author: 'Claude Code'

inputs:
  containers:
    description: 'Space-separated list of containers to rollback'
    required: true
  backup_tag:
    description: 'Backup tag to restore from (e.g., backup-1726276543)'
    required: true
  domain:
    description: 'Domain name to validate after rollback'
    required: true
  nginx_restart:
    description: 'Whether to restart nginx after rollback (true/false)'
    required: false
    default: 'false'
  nginx_container:
    description: 'Nginx container name'
    required: false
    default: 'nginx'
  validation_endpoints:
    description: 'Comma-separated endpoints to validate'
    required: false
    default: '/,/health'

outputs:
  rollback_status:
    description: 'Overall rollback status (success|failed)'
  containers_rolled_back:
    description: 'Containers that were successfully rolled back'
  validation_status:
    description: 'Post-rollback validation status'
  response_times:
    description: 'Post-rollback endpoint response times'

runs:
  using: 'composite'
  steps:
    - name: 🔄 Execute Container Rollback
      id: rollback
      uses: ./.github/actions/execute-remote-docker
      with:
        containers: ${{ inputs.containers }}
        operation: 'rollback'
        nginx_restart: ${{ inputs.nginx_restart }}
        nginx_container: ${{ inputs.nginx_container }}
        backup_tag: ${{ inputs.backup_tag }}
      
    - name: ⏳ Wait for Services to Stabilize
      shell: bash
      run: |
        echo "⏳ Allowing services to stabilize after rollback..."
        sleep 10
        echo "✅ Stabilization period complete"
    
    - name: 🧪 Validate Rollback Success
      id: validate
      uses: ./.github/actions/validate-endpoints
      with:
        domain: ${{ inputs.domain }}
        endpoints: ${{ inputs.validation_endpoints }}
        timeout: '15'
        retries: '2'
    
    - name: 📊 Process Rollback Results
      shell: bash
      run: |
        rollback_status="${{ steps.rollback.outputs.operation_status }}"
        validation_status="${{ steps.validate.outputs.validation_status }}"
        
        echo "🔄 Rollback operation: $rollback_status"
        echo "🧪 Post-rollback validation: $validation_status"
        
        # Determine overall success
        if [ "$rollback_status" = "success" ] && [ "$validation_status" = "success" ]; then
          echo "rollback_status=success" >> $GITHUB_OUTPUT
          echo "✅ Rollback completed successfully with validation"
        else
          echo "rollback_status=failed" >> $GITHUB_OUTPUT
          echo "❌ Rollback failed or validation failed"
          
          if [ "$rollback_status" = "failed" ]; then
            echo "   - Container rollback operation failed"
          fi
          if [ "$validation_status" = "failed" ]; then
            echo "   - Post-rollback validation failed"
            echo "   - Failed endpoints: ${{ steps.validate.outputs.failed_endpoints }}"
          fi
          
          exit 1
        fi
        
        # Forward outputs
        echo "containers_rolled_back=${{ steps.rollback.outputs.containers_affected }}" >> $GITHUB_OUTPUT
        echo "validation_status=$validation_status" >> $GITHUB_OUTPUT
        echo "response_times=${{ steps.validate.outputs.response_times }}" >> $GITHUB_OUTPUT
        
        echo "📋 Summary:"
        echo "   🐳 Containers: ${{ steps.rollback.outputs.containers_affected }}"
        echo "   ✅ Successful endpoints: ${{ steps.validate.outputs.successful_endpoints }}"
        echo "   ⏱️ Response times: ${{ steps.validate.outputs.response_times }}"