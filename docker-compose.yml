version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: filter-ical-postgres-${ENVIRONMENT}
    environment:
      POSTGRES_DB: filterical_${ENVIRONMENT}
      POSTGRES_USER: filterical
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - filter-ical
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U filterical"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: filter-ical-redis-${ENVIRONMENT}
    volumes:
      - redis-data:/data
    networks:
      - filter-ical
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    container_name: filter-ical-backend-${ENVIRONMENT}
    build:
      context: ./backend
      args:
        GIT_COMMIT: ${GIT_COMMIT:-unknown}
    ports:
      - "${BACKEND_PORT}:3000"
    env_file: backend/.env.${ENVIRONMENT}
    environment:
      DATABASE_URL: postgresql://filterical:${POSTGRES_PASSWORD}@postgres:5432/filterical_${ENVIRONMENT}
      REDIS_URL: redis://redis:6379
    networks:
      - filter-ical
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

networks:
  filter-ical:
    name: filter-ical-${ENVIRONMENT}

volumes:
  postgres-data:
    name: filter-ical-postgres-${ENVIRONMENT}
  redis-data:
    name: filter-ical-redis-${ENVIRONMENT}
